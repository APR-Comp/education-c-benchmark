--- Lab-10/3239-303919//303919_buggy.c	2023-11-27 20:53:21.249127236 +0200
+++ Lab-10/3239-303919//Main.c	2023-11-27 20:53:21.249127236 +0200
@@ -1,84 +1,70 @@
+/*
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for non-trivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template.
+ - Use pointers only and when required allocate memory Dynamically instead of
+static memory allocation otherwise you will get 0 marks.
+-----------------------------------------------------------------------------------------------------------------------------------------------------
+You are given two strings as input. Write a program to find out whether the two
+given strings are valid or not. Two strings are said to be valid if every
+character of one string is also present in other string at any place. Example :
+"abc" and "cab" are valid strings.
+
+Note : Input character will be lower case alphabates only. Size of string will
+be given by the user and use dynamic memory allocation.
+
+Input Format: First line contain the size of first string followed by next line
+containing the string itself. Similarly next line contain the size of second
+string followed by next line containing the string itself.
+
+Output : Valid, if two strings are valid otherwise print Not Valid.
+
+Example
+Input :
+3
+abc
+3
+cab
+
+Output:
+Valid
+*/
 #include <stdio.h>
 #include <stdlib.h>
 
-int valid(char *var__0, char *var__1, int var__2) {
-  int var__3 = 0;
-  if (1) {
-    int var__4 = 0;
-    while ((*(&((*(&(var__4)))))) < (*(&(var__2)))) {
-      {
-        int var__5 = 0;
-        while ((*(&((*(&((*(&(var__5))))))))) <
-               (*(&((*(&((*(&(var__2)))))))))) {
-          if (1) {
-            {
-              if (0) {
-              } else {
-                if (!*((*(&((*(&(var__0)))))) + (*(&(var__4)))) ==
-                    *(var__1 + (*(&(var__5))))) {
-                } else {
-                  {
-                    if (1) {
-                      (*(&(var__3)))++;
-                    }
-                    if (0) {
-                    } else {
-                      *((*(&((*(&((*(&(var__1))))))))) +
-                        (*(&((*(&(var__5))))))) = 9;
-                    }
-                  }
-                }
-              }
-            }
-          };
-          (*(&((*(&(var__5))))))++;
-        }
-      };
-      var__4++;
-    }
-  }
-  return var__3;
+int valid(char *s1, char *s2, int n) {
+  int a[26] = {0}, b[26] = {0};
+  for (int i = 0; i < n; i++) {
+    a[s1[i] - 'a'] += 1;
+    b[s2[i] - 'a'] += 1;
+  }
+  for (int i = 0; i < 26; i++)
+    if (a[i] != b[i])
+      return 0;
+  return 1;
 }
+
 int main() {
-  char *var__0, *var__1;
-  int var__6, var__2, var__3;
-  if (1) {
-    (*(&(scanf)))("%d\n", &var__6);
-  }
-  if (1) {
-    (*(&((*(&((*(&(var__0))))))))) =
-        (char *)malloc((*(&((*(&(var__6)))))) * sizeof(char));
-  }
-  (*(&((*(&(scanf))))))("%s\n", var__0);
-  if (1) {
-    (*(&((*(&(scanf))))))("%d\n", &var__2);
-  }
-  if (1) {
-    (*(&((*(&((*(&(var__1))))))))) =
-        (char *)malloc((*(&((*(&((*(&(var__2))))))))) * sizeof(char));
-  }
-  (*(&((*(&(scanf))))))("%s", (*(&((*(&((*(&(var__1))))))))));
-  if (!(*(&((*(&(var__6)))))) != (*(&((*(&((*(&(var__2)))))))))) {
-  } else {
-    (*(&(printf)))("Not Valid");
-  }
-  (*(&((*(&(var__3)))))) = (*(&((*(&((*(&(valid)))))))))(
-      (*(&((*(&(var__0)))))), var__1, (*(&(var__2))));
-  if (!var__3 == var__2) {
-    if (1) {
-      (*(&((*(&(printf))))))("Not Valid");
-    }
-  } else {
-    if (1) {
-      (*(&((*(&(printf))))))("Valid");
-    }
-  }
-  if (0) {
-  } else {
-    (*(&((*(&(free))))))(var__0);
-  }
-  (*(&(free)))((*(&(var__1))));
-  if (1) {
-    return 0;
-  }
-}
+  int n1, n2;
+  char *s, *t;
+
+  scanf("%d", &n1);
+  s = (char *)malloc((n1 + 1) * sizeof(char));
+  scanf("%s", s);
+
+  scanf("%d", &n2);
+  t = (char *)malloc((n2 + 1) * sizeof(char));
+  scanf("%s", t);
+
+  if (n1 != n2)
+    printf("Not Valid");
+  else if (valid(s, t, n1))
+    printf("Valid");
+  else
+    printf("Not Valid");
+
+  return 0;
+}
\ No newline at end of file
