--- Lab-10/3238-303624/303624_buggy.c	2023-11-28 02:53:21.245793869 +0800
+++ Lab-10/3238-303624/Main.c	2023-12-27 07:25:54.625223891 +0800
@@ -1,87 +1,123 @@
-/*numPass=0, numTotal=5
-Verdict:WRONG_ANSWER, Visibility:1, Input:"18 abcxyzdefxyzghixyz
+/*
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for non-trivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template.
+ - Use pointers only and when required allocate memory Dynamically instead of
+static memory allocation otherwise you will get 0 marks. All Strings are to be
+allocated dynamically
+
+You are given three strings s1, s2 and s3 as input. You need to replace all the
+occurrences of s2 in s1 by s3. Print the string s1 unchanged if s2 does not
+occur in s1.
+
+For Example:
+if the string s1 is "abcxyzdefxyzghixyz",
+s2 is "xyz",
+s3 is "uv" then the output should be "abcuvdefuvghiuv"
+
+INPUT FORMAT :
+Three lines of input each of them are of the form "n s" where n is size of the
+input string s.
+
+For the above example :
+INPUT:
+18 abcxyzdefxyzghixyz
 3 xyz
-2 uv", ExpOutput:"abcuvdefuvghiuv
-", Output:""
-Verdict:WRONG_ANSWER, Visibility:1, Input:"16 hello,howareyou?
-3 are
-4 were", ExpOutput:"hello,howwereyou?
-", Output:""
-Verdict:WRONG_ANSWER, Visibility:1, Input:"20 abcdhefghighehiklmhe
-2 he
-4 hehe", ExpOutput:"abcdhehefghighehehiklmhehe
-", Output:""
-Verdict:WRONG_ANSWER, Visibility:1, Input:"18 hihellohihellohiih
-2 hi
-5 hello", ExpOutput:"hellohellohellohellohelloih
-", Output:""
-Verdict:WRONG_ANSWER, Visibility:0, Input:"14 hihellohihello
-3 hii
-2 hi", ExpOutput:"hihellohihello
-", Output:""
+2 uv
+
+OUTPUT:
+abcuvdefuvghiuv
+
+Note : You can assume that there would be no spaces in the input strings
 */
 #include <stdio.h>
 #include <stdlib.h>
-int str_len(char s[]) {
-  int i;
-  for (i = 0; s[i] != '\0'; ++i)
-    ;
-  return i;
-}
-void replace_substring(char *s, char *t, char *w) {
-  int count = 0;
+
+int get_len(char s[]) {
   int i = 0;
-  while (s[i] != '\0') {
-    for (int j = i; j < i + str_len(t); j++) {
-      if (s[j] == t[j - i]) {
-        count++;
-        // printf("Matching %c and %c\n", s[j], t[j-i]);
-      } else
-        count = 0;
-    }
-    if (count == str_len(t)) {
-      // found a matching substr.
-      // char*x=(char*)malloc(sizeof(char)*str_len(w));
-      // for(int k=0;k<str_len(w)+i+1;k++)
-      //   x[k]=w[k];
-      printf("%s", w);
-      i += str_len(t);
-    } else {
-      printf("%c", s[i]);
-      i++;
-    }
+  while (s[i] != '\0')
+    i++;
 
-    /*   if(str_len(t)==str_len(w))
-       {
-           pr
+  return i;
+}
 
+int number_occourences(char *s, char *t) {
+  int s_len, t_len, i, j = 0;
 
+  int ncount, count = 0;
+  s_len = get_len(s);
+  t_len = get_len(t);
+
+  for (i = 0; i < s_len; i++) {
+    ncount = 0;
+    for (j = 0; i + j < s_len && j < t_len; j++)
+      if (s[i + j] == t[j])
+        ncount++;
 
-           for(int k=i;k<str_len(w)+i;k++)
-           s[k]=w[k-i];
-       i=i+str_len(t);}
-       else if(str_len(t)>str_len(w))
-       {
+    count = count + ncount / t_len;
+  }
 
-       }
-       else if(str_len(t)>str_len(w))
-       {
+  return count;
+}
 
-       }
+int replace_substring(char *s, char *t, char *w) {
+  int j, i = 0, k = 0, index = -1, ncount = 0;
+  char *copy, *x, *y, *z;
+
+  int s_len = get_len(s);
+  int t_len = get_len(t);
+  int w_len = get_len(w);
+
+  int max_size_new = s_len + w_len * (number_occourences(s, t) + 1);
+  copy = (char *)malloc(max_size_new * sizeof(char));
+
+  for (i = 0; i < s_len; i++) {
+    ncount = 0;
+
+    // checking if we have an occourence of a substring
+    for (j = 0; i + j < s_len && j < t_len; j++)
+      if (s[i + j] == t[j])
+        ncount++;
+
+    // we have found an occourence
+    if (ncount / t_len) {
+      for (j = 0; j < w_len; j++)
+        copy[k + j] = w[j];
 
-}
-   printf("%s", s);*/
+      i = i + t_len - 1;
+      k = k + w_len;
+    } else {
+      copy[k] = s[i];
+      k++;
+    }
   }
+
+  copy[k] = '\0';
+
+  printf("%s\n", copy);
 }
 
 int main() {
-  int l1, l2, l3;
-  scanf("%d", &l1);
-  char *s1 = (char *)malloc(sizeof(char) * l1);
-  scanf("%d", &l2);
-  char *s2 = (char *)malloc(sizeof(char) * l2);
-  scanf("%d", &l3);
-  char *s3 = (char *)malloc(sizeof(char) * l3);
-  replace_substring(s1, s2, s3);
+  int n1, n2, n3;
+  char *s, *t, *w;
+
+  scanf("%d", &n1);
+  s = (char *)malloc((n1 + 1) * sizeof(char));
+  scanf("%s", s);
+
+  scanf("%d", &n2);
+  t = (char *)malloc((n2 + 1) * sizeof(char));
+  scanf("%s", t);
+
+  scanf("%d", &n3);
+  w = (char *)malloc((n3 + 1) * sizeof(char));
+  scanf("%s", w);
+
+  // printf("%d" , number_occourences(s,t));
+  replace_substring(s, t, w);
+
   return 0;
 }
\ No newline at end of file
