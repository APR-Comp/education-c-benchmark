--- Lab-9/3106-300255//300255_buggy.c	2023-11-27 20:53:21.295794370 +0200
+++ Lab-9/3106-300255//Main.c	2023-11-27 20:53:21.295794370 +0200
@@ -1,39 +1,46 @@
+/*
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for nontrivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template.
+
+- You have to solve this problem using recursion
+- Some marks are reserved for writing correct base case and recursive step
+-------------------------------------------------------------------------------------------
+
+Write a C program, using recursion, to check if the given string is a palindrome
+or not. A palindrome is a word, phrase or sentence that reads the same backward
+or forward. The string would only contain lower case letters.
+
+Input: liril
+Output: Yes
+
+Input: oolaleloo
+Output: No
+*/
 #include <stdio.h>
-#include <stdlib.h>
 #include <string.h>
 
-int pali(char var__0[100], int var__1, int var__2) {
-  if (!var__2 >= (*(&(var__1)))) {
-  } else {
-    return 1;
-  }
-  if (0) {
-  } else {
-    if (!(*(&((*(&(var__0))))))[var__1] != var__0[(*(&((*(&(var__2))))))]) {
-    } else {
-      return 0;
-    }
-  }
-  if (0) {
-  } else {
-    pali(var__0, --(*(&((*(&(var__1)))))), ++(*(&((*(&(var__2)))))));
-  }
-  return 1;
-}
+void check(char[], int);
+
 int main() {
-  char var__0[100];
-  if (1) {
-    (*(&((*(&(scanf))))))("%s", (*(&(var__0))));
-  }
-  int var__3 = (*(&((*(&((*(&(strlen)))))))))(var__0);
-  int var__4 =
-      (*(&((*(&((*(&(pali)))))))))((*(&(var__0))), (*(&(var__3))) - 1, 0);
-  if (!var__4 == 1) {
-    if (1) {
-      (*(&((*(&(printf))))))("No");
+  char word[20];
+  scanf("%s", word);
+  check(word, 0);
+  return 0;
+}
+
+void check(char word[], int index) {
+  int len = strlen(word) - (index + 1);
+  if (word[index] == word[len]) {
+    if (index + 1 == len || index == len) {
+      printf("Yes\n");
+      return;
     }
+    check(word, index + 1);
   } else {
-    (*(&((*(&(printf))))))("Yes");
+    printf("No\n");
   }
-  return 0;
-}
+}
\ No newline at end of file
