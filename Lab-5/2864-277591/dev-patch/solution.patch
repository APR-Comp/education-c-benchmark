--- Lab-5/2864-277591//277591_buggy.c	2023-11-27 20:53:21.282460903 +0200
+++ Lab-5/2864-277591//Main.c	2023-11-27 20:53:21.282460903 +0200
@@ -1,83 +1,55 @@
+/*
+ANNOUNCEMENT: Up to 20% marks will be allotted for good programming practice.
+These include
+- Comments: for the non trivial part of the code
+- Indentation: align your code properly
+- Use the function in the template compulsorily and more functions, if
+necessary.
+---------------------------------
+Given two positive integers, n1 and n2, output all the prime numbers between
+(and including) n1 and n2, separated by a space each.
+
+e.g.
+
+Input:
+11 20
+Output:
+11 13 17 19
+
+
+Input:
+3 11
+Output:
+3 5 7 11
+
+Input:
+4 10
+Output:
+5 7
+*/
 #include <stdio.h>
-#include <stdlib.h>
-#include <math.h>
-int check_prime(int var__0) {
-  if (!var__0 % 2 == 0 || (*(&(var__0))) == 1) {
-  } else {
-    if (0) {
-    } else {
-      return 0;
-    }
-  }
-  int var__1, var__2;
-  if (1) {
-    var__2 = (*(&((*(&((*(&(sqrt)))))))))(var__0);
-  }
-  (*(&((*(&((*(&(var__1))))))))) = 3;
-  while ((*(&((*(&((*(&(var__1))))))))) <= (*(&((*(&(var__2))))))) {
-    if (0) {
-    } else {
-      {
-        if (0) {
-        } else {
-          if (!(*(&(var__0))) % (*(&((*(&(var__1)))))) == 0) {
-          } else {
-            if (1) {
-              return 0;
-            }
-          }
-        }
-      }
-    };
-    var__1++;
-  }
-  if (1) {
-    return 1;
+int check_prime(int num);
+int main() {
+  int n1, n2, i, flag;
+  scanf("%d %d", &n1, &n2);
+  for (i = n1; i <= n2; ++i) {
+    flag = check_prime(i);
+    if (flag == 0)
+      printf("%d ", i);
   }
+  return 0;
 }
-void disp_prime(int var__4) {
-  if (0) {
-  } else {
-    (*(&((*(&((*(&(printf)))))))))("%d ", var__4);
+int check_prime(int num) /* User-defined function to check prime number*/
+{
+  if (num == 1) {
+    return 1;
   }
-}
-void process(int var__5, int var__6) {
-  int var__7, var__8;
-  if (1) {
-    (*(&(var__7))) = (*(&((*(&(var__5))))));
-    while ((*(&((*(&((*(&(var__7))))))))) <= (*(&((*(&((*(&(var__6)))))))))) {
-      if (0) {
-      } else {
-        {
-          if (0) {
-          } else {
-            (*(&((*(&(var__8)))))) = (*(&((*(&(check_prime))))))(var__7);
-          }
-          if (!(*(&((*(&((*(&(var__8))))))))) != 0) {
-          } else {
-            if (0) {
-            } else {
-              (*(&((*(&(disp_prime))))))((*(&(var__7))));
-            }
-          }
-        }
-      };
-      (*(&((*(&(var__7))))))++;
+  int j, flag = 0;
+  for (j = 2; j <= num / 2; ++j) {
+    if (num % j == 0) {
+      flag = 1;
+      break;
     }
   }
-}
-void ent_num() {
-  int var__5, var__6;
-  (*(&((*(&(scanf))))))("%d%d", &(*(&(var__5))), &(*(&(var__6))));
-  if (0) {
-  } else {
-    process((*(&((*(&(var__5)))))), var__6);
-  }
-}
-int main() {
-  if (0) {
-  } else {
-    (*(&((*(&(ent_num))))))();
-  }
-  return 0;
-}
+  return flag;
+}
\ No newline at end of file
