--- Lab-12/3355-307102//307102_buggy.c	2023-11-27 20:53:21.269127436 +0200
+++ Lab-12/3355-307102//Main.c	2023-11-27 20:53:21.269127436 +0200
@@ -1,47 +1,70 @@
+/*
+--------------------------------------------
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for non-trivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template.
+ - You are required to allocate memory Dynamically instead of static memory
+allocation otherwise you might get 0.
+ - Use of C Structures is mandatory.
+---------------------------------------------
+
+Two intervals overlap, if they have some point that is contained in both the
+intervals. You should design a Data-Structure such that it has two fields,
+namely the left index and the right index. Assume that the intervals specified
+will be closed intervals. You need to figure out, whether given two intervals,
+they overlap or not.
+
+Input Format:
+First line containing two space separated integer numbers, specifying the first
+closed interval Second line containing two space separated integer numbers,
+specifying the second closed interval
+
+Output Format:
+YES or NO in one line depending on the overlapping nature of the intervals
+
+Sample Input 1:
+4 10
+-1 6
+Sample Output 1:
+YES
+
+Sample Input 2:
+4 10
+-1 3
+Sample Output2:
+NO
+*/
 #include <stdio.h>
-#include <stdlib.h>
 
-struct var__0 {
-  int var__1;
-  int var__2;
-};
-struct var__3 {
-  struct var__0 var__4;
-  struct var__0 var__5;
+struct Interval {
+  int left;
+  int right;
 };
-struct var__3 var__6;
-int main() {
-  int var__1, var__2;
-  (*(&((*(&(scanf))))))("%d%d%d%d", &var__6.var__4.var__1,
-                        &var__6.var__4.var__2, &var__6.var__5.var__1,
-                        &(*(&((*(&(var__6)))))).var__5.var__2);
-  if (!(*(&(var__6))).var__5.var__1 >= (*(&((*(&(var__6)))))).var__4.var__1 &&
-      (*(&(var__6))).var__5.var__1 <= var__6.var__4.var__2) {
-    if (0) {
-    } else {
-      if (!(*(&(var__6))).var__5.var__2 >=
-              (*(&((*(&(var__6)))))).var__4.var__1 &&
-          (*(&((*(&(var__6)))))).var__5.var__2 <= var__6.var__4.var__2) {
-        (*(&(printf)))("NO");
-      } else {
-        if (1) {
-          {
-            (*(&((*(&((*(&(printf)))))))))("YES");
-          }
-        }
-      }
-    }
-  } else {
-    if (1) {
-      {
-        if (0) {
-        } else {
-          (*(&(printf)))("YES");
-        }
-      }
-    }
-  }
-  if (1) {
+
+void setPoints(struct Interval *interval, int left, int right) {
+  interval->left = left;
+  interval->right = right;
+}
+
+int checkIntersect(struct Interval int1, struct Interval int2) {
+  if (int1.right < int2.left || int2.right < int1.left)
     return 0;
-  }
+  return 1;
 }
+
+int main() {
+  int left, right;
+  struct Interval int1, int2;
+  scanf("%d %d", &left, &right);
+  setPoints(&int1, left, right);
+  scanf("%d %d", &left, &right);
+  setPoints(&int2, left, right);
+  if (checkIntersect(int1, int2))
+    printf("YES\n");
+  else
+    printf("NO\n");
+  return 0;
+}
\ No newline at end of file
