--- Lab-12/3355-307020//307020_buggy.c	2023-11-27 20:53:21.265794070 +0200
+++ Lab-12/3355-307020//Main.c	2023-11-27 20:53:21.265794070 +0200
@@ -1,56 +1,70 @@
-/*numPass=8, numTotal=9
-Verdict:ACCEPTED, Visibility:1, Input:"4 10
--1 6", ExpOutput:"YES
-", Output:"YES"
-Verdict:ACCEPTED, Visibility:1, Input:"4 10
--1 3", ExpOutput:"NO
-", Output:"NO"
-Verdict:ACCEPTED, Visibility:1, Input:"10 20
-20 50", ExpOutput:"YES
-", Output:"YES"
-Verdict:ACCEPTED, Visibility:1, Input:"0 0
--1 0", ExpOutput:"YES
-", Output:"YES"
-Verdict:ACCEPTED, Visibility:0, Input:"-1 -5
--6 9", ExpOutput:"YES
-", Output:"YES"
-Verdict:ACCEPTED, Visibility:0, Input:"0 1
-1 10", ExpOutput:"YES
-", Output:"YES"
-Verdict:ACCEPTED, Visibility:0, Input:"7 9
-2 3", ExpOutput:"NO
-", Output:"NO"
-Verdict:WRONG_ANSWER, Visibility:0, Input:"1 10
-5 7", ExpOutput:"YES
-", Output:"NO"
-Verdict:ACCEPTED, Visibility:0, Input:"8 10
-5 7", ExpOutput:"NO
-", Output:"NO"
+/*
+--------------------------------------------
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for non-trivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template.
+ - You are required to allocate memory Dynamically instead of static memory
+allocation otherwise you might get 0.
+ - Use of C Structures is mandatory.
+---------------------------------------------
+
+Two intervals overlap, if they have some point that is contained in both the
+intervals. You should design a Data-Structure such that it has two fields,
+namely the left index and the right index. Assume that the intervals specified
+will be closed intervals. You need to figure out, whether given two intervals,
+they overlap or not.
+
+Input Format:
+First line containing two space separated integer numbers, specifying the first
+closed interval Second line containing two space separated integer numbers,
+specifying the second closed interval
+
+Output Format:
+YES or NO in one line depending on the overlapping nature of the intervals
+
+Sample Input 1:
+4 10
+-1 6
+Sample Output 1:
+YES
+
+Sample Input 2:
+4 10
+-1 3
+Sample Output2:
+NO
 */
 #include <stdio.h>
-#include <stdlib.h>
 
-typedef struct interval {
-  int li, ri;
-} inv;
-void inp_inv(inv *s) { scanf("%d%d", &(s->li), &(s->ri)); }
+struct Interval {
+  int left;
+  int right;
+};
 
-void overlap(inv *, inv *);
+void setPoints(struct Interval *interval, int left, int right) {
+  interval->left = left;
+  interval->right = right;
+}
 
-int main() {
-  inv *A, *B;
-  A = (inv *)malloc(sizeof(inv));
-  B = (inv *)malloc(sizeof(inv));
-  inp_inv(A);
-  inp_inv(B);
-  overlap(A, B);
-  return 0;
+int checkIntersect(struct Interval int1, struct Interval int2) {
+  if (int1.right < int2.left || int2.right < int1.left)
+    return 0;
+  return 1;
 }
 
-void overlap(inv *i1, inv *i2) {
-  if (((i1->li >= i2->li) && (i1->li <= i2->ri)) ||
-      ((i1->ri >= i2->li) && (i1->ri <= i2->ri)))
-    printf("YES");
+int main() {
+  int left, right;
+  struct Interval int1, int2;
+  scanf("%d %d", &left, &right);
+  setPoints(&int1, left, right);
+  scanf("%d %d", &left, &right);
+  setPoints(&int2, left, right);
+  if (checkIntersect(int1, int2))
+    printf("YES\n");
   else
-    printf("NO");
+    printf("NO\n");
+  return 0;
 }
\ No newline at end of file
