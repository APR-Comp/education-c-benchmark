--- Lab-8/3082-297430//297430_buggy.c	2023-11-27 20:53:21.292461003 +0200
+++ Lab-8/3082-297430//Main.c	2023-11-27 20:53:21.292461003 +0200
@@ -1,72 +1,58 @@
-/*numPass=0, numTotal=5
-Verdict:WRONG_ANSWER, Visibility:1, Input:"3 3
-1 1 1
-1 1
- * 1
-1 1 1", ExpOutput:"0 1 2 
-", Output:""
-Verdict:WRONG_ANSWER, Visibility:1,
- * Input:"3 4
-1 2 3 4
-10 20 17 15
--10 -19 -2 -1", ExpOutput:"1 
-",
- * Output:""
-Verdict:WRONG_ANSWER, Visibility:1, Input:"5 5
-0 0 0 0 0
-0 0 0 0
- * 0
-0 0 0 0 0
-0 0 0 0 0
-0 0 0 0 0
-", ExpOutput:"0 1 2 3 4 
-",
- * Output:""
-Verdict:WRONG_ANSWER, Visibility:0, Input:"3 3
--1 -2 -3
--4 -5 -6
--7
- * -8 -9", ExpOutput:"0 
-", Output:""
-Verdict:WRONG_ANSWER, Visibility:0,
- * Input:"3 3 
--1 -1 -1
--1 -1 -1
--1 -1 -1", ExpOutput:"0 1 2 
-", Output:""
-*/
-#include <stdio.h>
-int max(int a, int b) { return (a > b ? a : b); }
-int max_sum(int num[], int i) {
-  int p = max(num[0], num[1]);
-  for (int j = 2; j < i; j++) {
-    p = max(p, num[j]);
-  }
-  return p;
-}
-int main() {
-  int m, n, rsum[100] = {0}, max, mat[100][100];
-  scanf("%d %d\n", &n, &m);
-  for (int i = 0; i < n; i++) {
-    for (int j = 0; j < m; j++) {
-      scanf("%d ", &mat[i][j]);
-    }
-    scanf("\n");
-  }
-  for (int i = 0; (i >= n) && (i < 100); i++) {
-    for (int j = 0; (j >= m) && (j < 100); j++) {
-      mat[i][j] = 0;
-    }
-  }
-  for (int i = 0; i < n; i++) {
-    for (int j = 0; j < m; j++) {
-      rsum[i] = rsum[i] + mat[i][j];
-    }
-  }
-  max = max_sum(rsum[100], n);
-  for (int k = 0; k < n; k++) {
-    if (rsum[k] == max)
-      printf("%d ", k);
-  }
-  return 0;
+/*
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for nontrivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template.
+-----------------------------------------------------------------------------------------------------------
+
+Given a matrix M[n][m], find out the row which has the maximum sum. If there are
+more than one row having maximum sum, print all of them in ascending order. The
+rows are indexed from 0.
+
+Constraints:
+n and m are between 1 to 100.
+
+Input:
+The first line contains two integers n and m, which denote the dimension of the
+matrix. Next there are n lines having m integers each. Each line denotes a row
+of the matrix and the ith value in jth line denotes the value of matrix[i][j].
+
+Output:
+A single line with the row number(or numbers) in ascending order separated by a
+single space.
+*/
+#include <limits.h>
+#include <stdio.h>
+int main() {
+  int n, m;
+  scanf("%d %d", &n, &m);
+  int mat[n][m];
+  for (int i = 0; i < n; i++) {
+    for (int j = 0; j < m; j++) {
+      scanf("%d", &mat[i][j]);
+    }
+  }
+  int ct = 0;
+  int row[n];
+  int max = INT_MIN;
+  for (int i = 0; i < n; i++) {
+    int sum = 0;
+    for (int j = 0; j < m; j++) {
+      sum += mat[i][j];
+    }
+    if (sum > max) {
+      max = sum;
+      row[0] = i;
+      ct = 1;
+    } else if (sum == max) {
+      row[ct] = i;
+      ct++;
+    }
+  }
+  for (int i = 0; i < ct; i++) {
+    printf("%d ", row[i]);
+  }
+  printf("\n");
 }
\ No newline at end of file
