--- Lab-8/3083-297563//297563_buggy.c	2023-11-27 20:53:21.295794370 +0200
+++ Lab-8/3083-297563//Main.c	2023-11-27 20:53:21.295794370 +0200
@@ -1,197 +1,115 @@
-#include <stdio.h>
-#include <stdlib.h>
+/*
+Up to 20% marks will be allotted for good programming practice. These include
+- Comments: for nontrivial code
+- Indentation: align your code properly
+- Function use and modular programming
+- Do not include anything in the header other than what is already given in the
+template.
+--------------------------------------------------------------------------------------------------------------
+
+We say that a matrix is good if it has got a sub-matrix which is a symmetric
+matrix.  If a matrix is not good, then we say its goodness is 0. However, if it
+is good, we define goodness to be the dimension of largest symmetric sub-matrix
+of the given matrix (i.e. if the largest symmetric sub-matrix is n x n, then the
+goodness is n). For example,
+
+0 1 1 0
+1 0 0 1
+1 0 2 3
+
+This matrix is good since
+1 0
+0 1
+is its sub-matrix and is symmetric.
+
+0 1 1
+1 0 0
+1 0 2
+ is also a symmetric sub-matrix of the given matrix.
+
+Since the dimension of the largest sub-matrix of the given matrix is 3, the
+goodness is 3.
+
+Your task:
+Given a matrix, print its goodness value and the location of the top left corner
+of the largest symetric sub-matrix. For the example given above, goodness value
+is 3 and location of the top left corner of the symmetric sub-matrix is (1,1)
+i.e. first row first column. If goodness is 0, then top left corner location may
+be taken as (-1,-1) since it is actually not defined.
 
-int goodv(int var__1[][20], int var__2[], int var__3, int var__4);
+
+Assume all numbers to be integer. If their are two or more largest symmetric
+sub-matrix with the location of top-left corner at (i1,j1) and (i2,j2), then
+output (i1,j1) if (i1 < i2) or (i1 == i2 and j1 < j2) , otherwise output
+(i2,j2).
+
+Input:
+m,n //denoting the number of rows and columns of the input matrix
+followed by m x n matrix with m rows (each in a new line) and n columns
+e.g.
+
+3 4
+0 1 1 0
+1 0 0 1
+1 0 2 3
+
+Output:
+g i j // if g is your goodness value and (i,j) is the location of the top left
+corner of the symmetric sub-matrix.
+
+e.g. answer for the above input will be
+
+3 1 1
+*/
+#include <stdio.h>
+int min(int a, int b) { return (a < b) ? a : b; }
 int main() {
-  int var__5[20][20], var__1, var__6;
-  int var__7 = 0, var__8, var__9;
-  int var__10[2];
-  if (1) {
-    (*(&((*(&(scanf))))))("%d", &(*(&((*(&(var__1)))))));
-  }
-  if (1) {
-    (*(&((*(&((*(&(scanf)))))))))("%d", &(*(&((*(&(var__6)))))));
-  }
-  if (0) {
-  } else {
-    (*(&((*(&(var__8)))))) = 0;
-    while ((*(&((*(&(var__8)))))) < var__1) {
-      if (0) {
-      } else {
-        (*(&(var__9))) = 0;
-        while ((*(&(var__9))) < var__6) {
-          if (1) {
-            (*(&((*(&((*(&(scanf)))))))))(
-                "%d", &(*(&((*(&(var__5))))))[(*(&((*(&((*(&(var__8)))))))))]
-                                             [(*(&((*(&(var__9))))))]);
-          };
-          ++(*(&(var__9)));
-        }
-      };
-      ++(*(&((*(&(var__8))))));
+  int m, n, i, j, k, l, ans_i = -1, ans_j = -1, flag;
+  int max_goodness = 0, curr_goodness, max_gp;
+  scanf("%d%d", &m, &n);
+
+  int M[m][n];
+
+  for (i = 0; i < m; i++) {
+    for (j = 0; j < n; j++) {
+      scanf("%d", &M[i][j]);
     }
   }
-  (*(&((*(&((*(&(var__7))))))))) = (*(&((*(&((*(&(goodv)))))))))(
-      var__5, (*(&((*(&((*(&(var__10))))))))), (*(&((*(&((*(&(var__1))))))))),
-      (*(&((*(&((*(&(var__6))))))))));
-  if (1) {
-    (*(&((*(&(printf))))))("%d %d %d", (*(&(var__7))), var__10[0] + 1,
-                           (*(&((*(&((*(&(var__10)))))))))[1] + 1);
-  }
-  if (0) {
-  } else {
-    return 0;
-  }
-}
-int goodv(int var__1[][20], int var__2[], int var__3, int var__4) {
-  int var__11[2], var__8, var__9, var__12, var__13, var__14, var__15 = 0,
-                                                             var__16;
-  int var__17[2];
-  if (0) {
-  } else {
-    (*(&((*(&((*(&(var__8))))))))) = 0;
-    while ((*(&(var__8))) < (*(&((*(&((*(&(var__4)))))))))) {
-      (*(&((*(&(var__9)))))) = 0;
-      while ((*(&((*(&(var__9)))))) < (*(&((*(&((*(&(var__3)))))))))) {
-        if (0) {
-        } else {
-          {
-            var__11[0] = (*(&(var__3))) - 1;
-            (*(&((*(&((*(&(var__11)))))))))[1] = var__4 - 1;
-            if (1) {
-              if (!(*(&((*(&(var__1))))))[(*(&((*(&(var__8)))))) + 1][(
-                      *(&(var__9)))] == var__1[var__8][var__9 + 1] &&
-                  ((*(&((*(&((*(&(var__8))))))))) + 1) < (*(&(var__3))) &&
-                  (var__9 + 1) < (*(&((*(&((*(&(var__4)))))))))) {
-              } else {
-                {
-                  if (1) {
-                    (*(&(var__17)))[0] = (*(&((*(&((*(&(var__13))))))))) =
-                        (*(&(var__8)));
-                  }
-                  (*(&((*(&((*(&(var__17)))))))))[1] = var__14 =
-                      (*(&((*(&(var__9))))));
-                  if (0) {
-                  } else {
-                    (*(&((*(&(var__16)))))) = 0;
-                  }
-                  if (0) {
-                  } else {
-                    if (var__13 < (*(&(var__11)))[0] &&
-                        (*(&((*(&(var__14)))))) < (*(&((*(&(var__11))))))[1]) {
-                      do {
-                        if (1) {
-                          {
-                            (*(&((*(&((*(&(var__12))))))))) = 1;
-                            if (1) {
-                              if (((((*(&((*(&(var__13)))))) +
-                                     (*(&((*(&(var__12))))))) <
-                                    (*(&((*(&(var__3))))))) &&
-                                   ((var__14 + (*(&((*(&(var__12))))))) <
-                                    (*(&(var__4))))) &&
-                                  ((*(&((*(&(var__1))))))
-                                       [(*(&((*(&((*(&(var__13))))))))) +
-                                        (*(&((*(&((*(&(var__12)))))))))]
-                                       [(*(&(var__14)))] ==
-                                   (*(&(var__1)))[var__13]
-                                                 [(*(&((*(&(var__14)))))) +
-                                                  (*(&(var__12)))])) {
-                                do {
-                                  if (1) {
-                                    var__12++;
-                                  }
-                                } while (
-                                    ((((*(&((*(&(var__13)))))) +
-                                       (*(&((*(&(var__12))))))) <
-                                      (*(&((*(&(var__3))))))) &&
-                                     ((var__14 + (*(&((*(&(var__12))))))) <
-                                      (*(&(var__4))))) &&
-                                    ((*(&((*(&(var__1))))))
-                                         [(*(&((*(&((*(&(var__13))))))))) +
-                                          (*(&((*(&((*(&(var__12)))))))))]
-                                         [(*(&(var__14)))] ==
-                                     (*(&(var__1)))[var__13]
-                                                   [(*(&((*(&(var__14)))))) +
-                                                    (*(&(var__12)))]));
-                              }
-                            }
-                            var__11[0] = (*(&((*(&(var__13)))))) +
-                                         (*(&((*(&(var__12)))))) - 1;
-                            if (0) {
-                            } else {
-                              var__11[1] = (*(&((*(&(var__14)))))) +
-                                           (*(&((*(&(var__12)))))) - 1;
-                            }
-                            if (1) {
-                              (*(&((*(&((*(&(var__13)))))))))++;
-                            }
-                            (*(&(var__14)))++;
-                          }
-                        }
-                      } while (var__13 < (*(&(var__11)))[0] &&
-                               (*(&((*(&(var__14)))))) <
-                                   (*(&((*(&(var__11))))))[1]);
-                    }
-                  }
-                  if (1) {
-                    (*(&((*(&(var__16)))))) =
-                        (*(&(var__11)))[0] - (*(&(var__8))) + 1;
-                  }
-                  if (1) {
-                    if (!(*(&((*(&((*(&(var__16))))))))) >
-                        (*(&((*(&(var__15))))))) {
-                      if (0) {
-                      } else {
-                        if (!var__16 == (*(&((*(&(var__15))))))) {
-                        } else {
-                          {
-                            if (!(((*(&((*(&((*(&(var__17)))))))))[0] <
-                                   var__2[0]) ||
-                                  (var__17[0] == (*(&((*(&(var__2))))))[0])) &&
-                                ((*(&((*(&(var__17))))))[1] <
-                                 (*(&((*(&((*(&(var__2)))))))))[1])) {
-                            } else {
-                              {
-                                if (1) {
-                                  (*(&((*(&((*(&(var__2)))))))))[0] =
-                                      (*(&(var__17)))[0];
-                                }
-                                if (1) {
-                                  (*(&((*(&((*(&(var__2)))))))))[1] =
-                                      (*(&((*(&(var__17))))))[1];
-                                }
-                              }
-                            }
-                          }
-                        }
-                      }
-                    } else {
-                      if (1) {
-                        {
-                          if (0) {
-                          } else {
-                            var__15 = (*(&(var__16)));
-                          }
-                          if (1) {
-                            (*(&(var__2)))[0] =
-                                (*(&((*(&((*(&(var__17)))))))))[0];
-                          }
-                          (*(&((*(&((*(&(var__2)))))))))[1] = var__17[1];
-                        }
-                      }
-                    }
-                  }
-                }
-              }
+
+  for (i = 0; i < m; i++) {
+    for (j = 0; j < n; j++) {
+      // checking whether an symmetric sub matrix begin at (i,j) i.e. at i+1th
+      // row and j+1th column
+      curr_goodness = 0;
+      flag = 0;
+      max_gp = min(m - i, n - j);
+      for (k = 0; k < max_gp; k++) {
+        for (l = k; l >= 0; l--) {
+          if (l == 0) {
+            continue;
+
+          } else {
+            if (M[i + k][j + k - l] != M[i + k - l][j + k]) {
+              curr_goodness = k;
+              flag = 1;
+              break;
             }
           }
-        };
-        ++(*(&((*(&((*(&(var__9)))))))));
-      };
-      ++(*(&((*(&(var__8))))));
+        }
+        if (flag == 1)
+          break;
+      }
+
+      if (k == max_gp)
+        curr_goodness = max_gp;
+
+      if (curr_goodness > max_goodness) {
+        max_goodness = curr_goodness;
+        ans_i = i + 1;
+        ans_j = j + 1;
+        // printf("%d %d %d\n",ans_i,ans_j,max_goodness );
+      }
     }
   }
-  if (1) {
-    return (*(&(var__15)));
-  }
-}
+  printf("%d %d %d\n", max_goodness, ans_i, ans_j);
+}
\ No newline at end of file
