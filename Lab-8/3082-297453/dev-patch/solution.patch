--- Lab-8/3082-297453//297453_buggy.c	2023-11-27 20:53:21.292461003 +0200
+++ Lab-8/3082-297453//Main.c	2023-11-27 20:53:21.292461003 +0200
@@ -1,94 +1,58 @@
-#include <stdio.h>
-#include <stdlib.h>
+/*
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for nontrivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template.
+-----------------------------------------------------------------------------------------------------------
 
-int max(int var__0, int var__1) {
-  if (1) {
-    if (!(*(&(var__0))) > var__1) {
-      if (1) {
-        if (!(*(&(var__0))) < (*(&((*(&((*(&(var__1)))))))))) {
-          if (!(*(&((*(&(var__0)))))) == var__1) {
-          } else {
-            if (1) {
-              return var__0;
-            }
-          }
-        } else {
-          if (0) {
-          } else {
-            return (*(&(var__1)));
-          }
-        }
-      }
-    } else {
-      return (*(&((*(&(var__0))))));
-    }
-  }
-}
+Given a matrix M[n][m], find out the row which has the maximum sum. If there are
+more than one row having maximum sum, print all of them in ascending order. The
+rows are indexed from 0.
+
+Constraints:
+n and m are between 1 to 100.
+
+Input:
+The first line contains two integers n and m, which denote the dimension of the
+matrix. Next there are n lines having m integers each. Each line denotes a row
+of the matrix and the ith value in jth line denotes the value of matrix[i][j].
+
+Output:
+A single line with the row number(or numbers) in ascending order separated by a
+single space.
+*/
+#include <limits.h>
+#include <stdio.h>
 int main() {
-  int var__2, var__3, var__4, var__5;
-  int var__6[100];
-  int var__7[100][100];
-  if (1) {
-    scanf("%d %d", &(*(&((*(&(var__2)))))), &(*(&((*(&((*(&(var__3))))))))));
-  }
-  (*(&((*(&((*(&(var__4))))))))) = 0;
-  while ((*(&(var__4))) < (*(&((*(&((*(&(var__2)))))))))) {
-    if (1) {
-      {
-        (*(&(var__6)))[(*(&((*(&((*(&(var__4)))))))))] = 0;
-        if (1) {
-          (*(&(var__5))) = 0;
-          while ((*(&(var__5))) < (*(&((*(&(var__3))))))) {
-            if (1) {
-              {
-                if (0) {
-                } else {
-                  scanf("%d", &var__7[(*(&((*(&(var__4))))))][var__5]);
-                }
-                if (0) {
-                } else {
-                  (*(&(var__6)))[var__4] =
-                      (*(&(var__6)))[(*(&(var__4)))] +
-                      (*(&((*(&((*(&(var__7)))))))))[(*(&((*(&(var__4))))))]
-                                                    [(*(&((*(&(var__5))))))];
-                }
-              }
-            };
-            (*(&(var__5)))++;
-          }
-        }
-      }
-    };
-    (*(&((*(&((*(&(var__4)))))))))++;
+  int n, m;
+  scanf("%d %d", &n, &m);
+  int mat[n][m];
+  for (int i = 0; i < n; i++) {
+    for (int j = 0; j < m; j++) {
+      scanf("%d", &mat[i][j]);
+    }
   }
-  int var__8 = (*(&((*(&((*(&(var__6)))))))))[0];
-  (*(&(var__4))) = 0;
-  while ((*(&((*(&(var__4)))))) < (*(&((*(&(var__2))))))) {
-    {
-      if (1) {
-        if (!var__6[var__4] > (*(&(var__8)))) {
-        } else {
-          if (1) {
-            (*(&((*(&(var__8)))))) =
-                (*(&((*(&(var__6))))))[(*(&((*(&((*(&(var__4)))))))))];
-          }
-        }
-      }
-    };
-    (*(&((*(&(var__4))))))++;
+  int ct = 0;
+  int row[n];
+  int max = INT_MIN;
+  for (int i = 0; i < n; i++) {
+    int sum = 0;
+    for (int j = 0; j < m; j++) {
+      sum += mat[i][j];
+    }
+    if (sum > max) {
+      max = sum;
+      row[0] = i;
+      ct = 1;
+    } else if (sum == max) {
+      row[ct] = i;
+      ct++;
+    }
   }
-  var__4 = 0;
-  while ((*(&((*(&(var__4)))))) < var__2) {
-    {
-      if (!var__6[(*(&((*(&((*(&(var__4)))))))))] == (*(&((*(&(var__8))))))) {
-      } else {
-        if (0) {
-        } else {
-          (*(&(printf)))("%d", (*(&(var__4))));
-        }
-      }
-    };
-    (*(&(var__4)))++;
+  for (int i = 0; i < ct; i++) {
+    printf("%d ", row[i]);
   }
-  return 0;
-}
+  printf("\n");
+}
\ No newline at end of file
