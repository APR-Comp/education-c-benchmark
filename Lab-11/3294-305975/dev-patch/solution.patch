--- Lab-11/3294-305975//305975_buggy.c	2023-11-27 20:53:21.262460703 +0200
+++ Lab-11/3294-305975//Main.c	2023-11-27 20:53:21.262460703 +0200
@@ -1,68 +1,46 @@
+/*
+--------------------------------------------
+Up to 20% marks will be allotted for good programming practice. These include
+ - Comments: for non-trivial code
+ - Indentation: align your code properly
+ - Function use and modular programming
+ - Do not include anything in the header other than what is already given in the
+template. TAs: Recursive algorithm is required.
+ ---------------------------------------------
+
+Given a positive number n, you need to give as an output the following pattern.
+You need to use recursion. No marks if loops are used.
+
+Example 1
+Input:
+11
+
+Output:
+11 6 1 -4 1 6 11
+
+Example 2
+Input:
+15
+
+Output
+15 10 5 0 5 10 15
+*/
 #include <stdio.h>
-#include <stdlib.h>
 
-int var__0;
-void revprint(int var__1) {
-  if (1) {
-    if (!var__1 == (*(&((*(&((*(&(var__0)))))))))) {
-      if (0) {
-      } else {
-        {
-          if (0) {
-          } else {
-            (*(&((*(&((*(&(printf)))))))))("%d ", var__1);
-          }
-          revprint((*(&((*(&((*(&(var__1))))))))) + 5);
-        }
-      }
-    } else {
-      if (0) {
-      } else {
-        printf("%d ", (*(&((*(&(var__1)))))));
-      }
-    }
-  }
-}
-void print(int var__1) {
-  if (0) {
-  } else {
-    if (!(*(&((*(&(var__1)))))) < 0) {
-    } else {
-      {
-        printf("%d ", (*(&((*(&(var__1)))))));
-        return (*(&((*(&((*(&(revprint)))))))))((*(&(var__1))) + 5);
-      }
-    }
-  }
-  if (!(*(&((*(&((*(&(var__1))))))))) == 0) {
-    if (0) {
-    } else {
-      {
-        if (0) {
-        } else {
-          (*(&((*(&((*(&(printf)))))))))("%d ", (*(&(var__1))));
-        }
-        if (1) {
-          (*(&((*(&((*(&(print)))))))))(var__1 - 5);
-        }
-      }
-    }
+void pattern(n) {
+  if (n <= 0) {
+    printf("%d ", n);
+    return;
   } else {
-    if (0) {
-    } else {
-      {
-        if (1) {
-          printf("%d", (*(&(var__1))));
-        }
-      }
-    }
+    printf("%d ", n);
+    pattern(n - 5);
+    printf("%d ", n);
   }
 }
+
 int main() {
-  if (0) {
-  } else {
-    (*(&((*(&(scanf))))))("%d", &(*(&(var__0))));
-  }
-  (*(&(print)))((*(&((*(&((*(&(var__0))))))))));
+  int n;
+  scanf("%d", &n);
+  pattern(n);
   return 0;
 }
